sudo: required
dist: trusty

services:
  - docker

matrix:
  fast_finish: true
  include:
    #- stage: "Check"
      #script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/check_clang-format.sh
    #- stage: "Check"
      #script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/check_clang-scan-build.sh
    #- stage: "Check"
      #script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/check_cppcheck.sh
      ## Building Qt can take close to 50 minutes, which is the time limit on Travis, so we build Qt
      ## in its own job, cache the build, and use the cache when building our app.
      ## Jobs with the same env (distro, os, etc.) share the cache, so by setting RESTRICT_CACHE to
      ## different values for i686 ans x86_64 builds, we make sure that they don't spend time
      ## downloading the cache they won't use.
    #- stage: "Windows Deps: Qt"
      #env: RESTRICT_CACHE=/opt/cache/windows/i686
      #script: sudo docker run --rm -v $PWD:/repo -v $RESTRICT_CACHE:/cache debian:stretch-slim /bin/bash /repo/.travis/build_windows.sh stage1 i686
      #cache:
        #directories:
          #- /opt/cache/windows/i686
    #- stage: "Windows Deps: Qt"
      #env: RESTRICT_CACHE=/opt/cache/windows/x86_64
      #script: sudo docker run --rm -v $PWD:/repo -v $RESTRICT_CACHE:/cache debian:stretch-slim /bin/bash /repo/.travis/build_windows.sh stage1 x86_64
      #cache:
        #directories:
          #- /opt/cache/windows/x86_64
    #- stage: "Build"
      #env: RESTRICT_CACHE=/opt/cache/windows/i686
      #script: sudo docker run --rm -v $PWD:/repo -v $RESTRICT_CACHE:/cache debian:stretch-slim /bin/bash /repo/.travis/build_windows.sh stage2 i686
      #cache:
        #directories:
          #- /opt/cache/windows/i686
    #- stage: "Build"
      #env: RESTRICT_CACHE=/opt/cache/windows/x86_64
      #script: sudo docker run --rm -v $PWD:/repo -v $RESTRICT_CACHE:/cache debian:stretch-slim /bin/bash /repo/.travis/build_windows.sh stage2 x86_64
      #cache:
        #directories:
          #- /opt/cache/windows/x86_64
      # We build only x86_64, i386 and armel in non-master branches (e.g. Pull Requests, feature
      # branches) as if these three succeed, then the other are likely to succeed too. x86_64 is
      # a native build, i386 is a multilib build and armel is a cross-toolchain + qemu build. All
      # other builds that we skip on non-master fall into one of thse.
    - stage: "Build"
      env: JOB="AppImage amd64"
      script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/build_linux.sh amd64
    - stage: "Build"
      env: JOB="AppImage i386"
      script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/build_linux.sh i386
    - stage: "Build"
      env: JOB="AppImage armel"
      script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/build_linux.sh armel
    - stage: "Build"
      #if: branch = master
      env: JOB="AppImage armhf"
      script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/build_linux.sh armhf
    - stage: "Build"
      #if: branch = master
      env: JOB="AppImage arm64"
      script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/build_linux.sh arm64
    #- stage: "Build"
      #script: sudo docker run --rm -v $PWD:/repo debian:stretch-slim /bin/bash /repo/.travis/build_macos.sh

#after_success:
    ## If PR, upload build results of a PR to a temporary file hosting
  #- test $TRAVIS_PULL_REQUEST != "false" && python3 .travis/deploy_pr.sh
    ## If master branch, create a continious release
  #- test $TRAVIS_BRANCH = "master" && test $TRAVIS_PULL_REQUEST = "false" && bash .travis/deploy_master.sh

branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)$/

notifications:
  email: false
